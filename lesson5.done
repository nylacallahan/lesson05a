<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="codingSoundFavicon.ico" />

  <title>Lesson 05 â€” Split Color Piano Edition</title>

  <!-- import Tone.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/15.1.5/Tone.min.js"></script>

  <!-- import AudioKeys -->
  <script src="https://cdn.jsdelivr.net/gh/kylestetz/AudioKeys@master/dist/audiokeys.min.js"></script>

  <!-- style -->
  <style>
    body {
      margin: 0;
      height: 100vh;
      transition: background-color 0.4s ease;
      overflow: hidden;
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: white;
    }

    #color-left,
    #color-right {
      position: fixed;
      top: 0;
      width: 50%;
      height: 100%;
      transition: background-color 0.4s ease;
      z-index: -1;
    }

    #color-left {
      left: 0;
      background-color: white;
    }

    #color-right {
      right: 0;
      background-color: white;
    }

    h1 {
      margin-top: 1em;
      font-size: 2em;
    }

    p {
      margin: 0.5em 0;
    }

    .piano-guide {
      margin: 1.5em auto;
      width: 80%;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      background-color: #fafafa;
      padding: 10px;
    }

    .button-row {
      display: flex;
      justify-content: space-between;
      margin: 2em;
    }

    button {
      padding: 10px 20px;
      font-size: 1rem;
      border-radius: 10px;
      border: none;
      background-color: #333;
      color: white;
      cursor: pointer;
    }

    button:hover {
      background-color: #666;
    }

    img {
      max-width: 100%;
      border-radius: 8px;
    }
  </style>
</head>

<body>
  <!-- background halves -->
  <div id="color-left"></div>
  <div id="color-right"></div>

  <h1>Keyboard Keyboard ðŸŽ¹ â€” Split Color Piano Edition</h1>
  <h2></h2>Mono Sound</h2>
  <p>Press keys on your computer keyboard to play notes!</p>
  <p>Try pressing two at once to see each half of the screen react.</p>

  <!-- Piano Image Guide -->
  <div class="piano-guide">
    <img
      src="https://raw.githubusercontent.com/kylestetz/audiokeys/master/images/audiokeys-mapping-rows2.jpg"
      alt="Computer keyboard mapped to piano keys">
    <p style="font-style: italic;">Computer keyboard to piano key layout</p>
  </div>

  <!-- Nav Buttons -->
  <div class="button-row">
    <button class="left" onclick="location.href='index.html'">ToC</button>
    <button class="center"
      onclick="window.open('https://github.com/Interactimation/coding-sound/blob/main/lesson05.html', '_blank')">Code</button>
    <button class="right" onclick="window.open('lesson06.html')">Next</button>
  </div>

  <script>
    /*
      KEYBOARD KEYBOARD â€” Split Color Piano Edition
      * Based on the original Lesson 05
      * Modified by Nyla Callahan
      * New Features:
      ** - Split color background when two notes are played
      ** - Piano/keyboard visual guide added
    */

    // Set up effects
    let fbDelay = new Tone.FeedbackDelay({
      delayTime: 0.1,
      feedback: 0.1,
      wet: 0.5
    });

    const synth = new Tone.MonoSynth().connect(fbDelay);
    const gain = new Tone.Gain(0.5);
    fbDelay.connect(gain);
    gain.toDestination();

    // AudioKeys setup
    const keyboard = new AudioKeys({
      rows: 2,
      polyphony: 2 // allows pressing 2 keys at once
    });

    const colorLeft = document.getElementById("color-left");
    const colorRight = document.getElementById("color-right");

    let pressedKeys = [];

    // When a key is pressed
    keyboard.down((key) => {
      synth.triggerAttack(key.frequency);
      pressedKeys.push(key);

      if (pressedKeys.length === 1) {
        // Single note: full-screen color
        const hue = (key.frequency % 360).toFixed(0);
        colorLeft.style.backgroundColor = `hsl(${hue}, 80%, 65%)`;
        colorRight.style.backgroundColor = `hsl(${hue}, 80%, 65%)`;
      } else if (pressedKeys.length === 2) {
        // Two notes: split-screen colors
        const hue1 = (pressedKeys[0].frequency % 360).toFixed(0);
        const hue2 = (pressedKeys[1].frequency % 360).toFixed(0);
        colorLeft.style.backgroundColor = `hsl(${hue1}, 80%, 65%)`;
        colorRight.style.backgroundColor = `hsl(${hue2}, 80%, 65%)`;
      }
    });

    // When a key is released
    keyboard.up((key) => {
      synth.triggerRelease();
      pressedKeys = pressedKeys.filter(k => k.note !== key.note);

      if (pressedKeys.length === 0) {
        // Reset to white when all keys are released
        colorLeft.style.backgroundColor = "white";
        colorRight.style.backgroundColor = "white";
      }
    });

    // Add a light LFO to modulate volume slightly
    let lfo1 = new Tone.LFO(10, 5, 12);
    lfo1.connect(synth.volume);
    lfo1.start();

    // Arrow key listener (gain & delay control)
    document.addEventListener("keydown", function (e) {
      if (e.key === "ArrowUp") {
        gain.gain.value = Math.min(2, gain.gain.value + 0.1);
      } else if (e.key === "ArrowDown") {
        gain.gain.value = Math.max(0.1, gain.gain.value - 0.1);
      } else if (e.key === "ArrowLeft") {
        fbDelay.wet.value = Math.max(0, fbDelay.wet.value - 0.1);
      } else if (e.key === "ArrowRight") {
        fbDelay.wet.value = Math.min(1, fbDelay.wet.value + 0.1);
      }
      console.log(`Gain: ${gain.gain.value}, Delay Wet: ${fbDelay.wet.value}`);
    });
  </script>

</body>

</html>
